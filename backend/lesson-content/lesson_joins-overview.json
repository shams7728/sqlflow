{
  "id": "joins-overview",
  "title": "Joins Overview",
  "category": "Joins",
  "difficulty": "Intermediate",
  "estimatedTime": "12 min",
  "starterQuery": "SELECT * FROM employees INNER JOIN departments ON employees.department_id = departments.id;",
  "theory": [
    {
      "type": "paragraph",
      "text": "1. What are Joins in SQL?\nJoins are used to combine rows from two or more tables based on related columns. They help fetch meaningful, connected data from multiple tables."
    },
    {
      "type": "paragraph",
      "text": "2. Why Use Joins?\nJoins allow you to organize and retrieve related data spread across tables. For example, linking employee data with their department info for comprehensive reports."
    },
    {
      "type": "paragraph",
      "text": "3. Where are Joins Used?\nIn complex queries involving relational databases with normalized schemas, where data is logically split across different tables."
    },
    {
      "type": "paragraph",
      "text": "4. How are Joins Written?\nUse JOIN clauses (INNER, LEFT, RIGHT, FULL, etc.) in a SELECT statement and define the ON condition to match keys."
    },
    {
      "type": "table",
      "columns": [
        "Join Type",
        "Description"
      ],
      "rows": [
        [
          "INNER JOIN",
          "Returns only matching rows from both tables"
        ],
        [
          "LEFT JOIN",
          "Returns all rows from the left table, plus matches from the right"
        ],
        [
          "RIGHT JOIN",
          "Returns all rows from the right table, plus matches from the left"
        ],
        [
          "FULL JOIN",
          "Returns all rows when there is a match in either table"
        ],
        [
          "SELF JOIN",
          "Joins a table to itself using aliases"
        ],
        [
          "CROSS JOIN",
          "Returns the Cartesian product of both tables"
        ]
      ]
    },
    {
      "type": "images",
      "images": [
        {
          "src": "/assests/img_inner_join.png",
          "alt": "Inner Join",
          "caption": "Inner Join Diagram"
        },
        {
          "src": "/assests/img_left_join.png",
          "alt": "Left Join",
          "caption": "Left Join Diagram"
        }
        
      ]
      
    },
    {
      "type": "images",
      "images": [
        {
          "src": "/assests/img_right_join.png",
          "alt": "Right Join",
          "caption": "Right Join Diagram"
        },
        {
          "src": "/assests/img_full_outer_join.png",
          "alt": "Full Outer Join",
          "caption": "Full Outer Join Diagram"
        }
        
      ]
      
    },

    
    
    {
      "type": "note",
      "text": "SQLite does not support FULL OUTER or RIGHT JOIN directly, but they can be emulated using UNION and subqueries."
    },
    {
      "type": "code",
      "text": "SELECT * FROM employees INNER JOIN departments ON employees.department_id = departments.id;"
    }
  ],
  "schema": {
    "tables": [
      {
        "name": "employees",
        "columns": [
          {
            "name": "id",
            "type": "INTEGER",
            "constraints": "PRIMARY KEY"
          },
          {
            "name": "name",
            "type": "TEXT",
            "constraints": "NOT NULL"
          },
          {
            "name": "department_id",
            "type": "INTEGER"
          }
        ]
      },
      {
        "name": "departments",
        "columns": [
          {
            "name": "id",
            "type": "INTEGER",
            "constraints": "PRIMARY KEY"
          },
          {
            "name": "name",
            "type": "TEXT",
            "constraints": "NOT NULL"
          }
        ]
      }
    ]
  },
  "sample_data": {
    "employees": [
      {
        "id": 1,
        "name": "Alice",
        "department_id": 1
      },
      {
        "id": 2,
        "name": "Bob",
        "department_id": 2
      },
      {
        "id": 3,
        "name": "Charlie",
        "department_id": 3
      },
      {
        "id": 4,
        "name": "Diana",
        "department_id": null
      }
    ],
    "departments": [
      {
        "id": 1,
        "name": "Engineering"
      },
      {
        "id": 2,
        "name": "Marketing"
      },
      {
        "id": 4,
        "name": "Sales"
      }
    ]
  },
  "examples": [
    {
      "query": "SELECT e.name, d.name FROM employees e INNER JOIN departments d ON e.department_id = d.id;",
      "description": "INNER JOIN example",
      "explanation": "Returns names of employees and their departments where a match exists."
    },
    {
      "query": "SELECT e.name, d.name FROM employees e LEFT JOIN departments d ON e.department_id = d.id;",
      "description": "LEFT JOIN example",
      "explanation": "Returns all employees and their departments, including those without matches."
    }
  ],
  "practice": [
    {
      "id": "joins-overview_practice1",
      "challenge": "Get employee names and department names using INNER JOIN.",
      "solution": "SELECT e.name, d.name FROM employees e INNER JOIN departments d ON e.department_id = d.id;",
      "hint": "Use INNER JOIN between employees and departments"
    }
  ],
  "quiz": [
    {
      "id": "joins-overview_q1",
      "type": "mcq",
      "question": "Which JOIN returns only matching rows from both tables?",
      "options": [
        "LEFT JOIN",
        "INNER JOIN",
        "FULL JOIN",
        "RIGHT JOIN"
      ],
      "answer": "INNER JOIN"
    },
    {
      "id": "joins-overview_q2",
      "type": "truefalse",
      "question": "CROSS JOIN returns all combinations of rows from two tables.",
      "answer": true
    },
    {
      "id": "joins-overview_q3",
      "type": "fill",
      "question": "To join a table to itself, we use ______ JOIN.",
      "answer": "SELF"
    }
  ],
  "challenges": [
    {
      "id": "joins-overview_ch1",
      "title": "Explore Join Types",
      "steps": [
        {
          "stepId": "joins-overview_ch1_step1",
          "description": "Step 1: Perform an INNER JOIN between employees and departments.",
          "solution": "SELECT * FROM employees INNER JOIN departments ON employees.department_id = departments.id;"
        },
        {
          "stepId": "joins-overview_ch1_step2",
          "description": "Step 2: Perform a LEFT JOIN to include employees with no department.",
          "solution": "SELECT * FROM employees LEFT JOIN departments ON employees.department_id = departments.id;"
        }
      ]
    }
  ]
}